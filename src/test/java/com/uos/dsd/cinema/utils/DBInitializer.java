package com.uos.dsd.cinema.utils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.TestComponent;
import org.springframework.transaction.annotation.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;

import javax.sql.DataSource;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

@TestComponent
public class DBInitializer {

    private static final int OFF = 0;
    private static final int ON = 1;

    private final List<String> tableNames = new ArrayList<>();

    private final Logger log = LoggerFactory.getLogger(DBInitializer.class);

    @Autowired
    private DataSource dataSource;

    @PersistenceContext
    private EntityManager entityManager;

    @Transactional
    public void clear() {

        if (tableNames.isEmpty()) {
            findDatabaseTableNames();
        }
        entityManager.clear();
        truncate();
    }

    private void findDatabaseTableNames() {

        try (Connection connection = dataSource.getConnection()) {
            Statement stmt = connection.createStatement();
            createSampleTable(stmt);

            DatabaseMetaData metaData = connection.getMetaData();
            String currentUser = metaData.getUserName();
            String databaseProductName = metaData.getDatabaseProductName();
            ResultSet tables = metaData.getTables(null, currentUser, "%", new String[] {"TABLE"});
            log.info("currentUser: {}", currentUser);
            log.info("databaseProductName: {}", databaseProductName);

            while (tables.next()) {
                String tableName = tables.getString("TABLE_NAME");

                // TODO: Flyway 추가 시 해당 테이블 제외
                // if (!"FLYWAY_SCHEMA_HISTORY".equalsIgnoreCase(tableName)) {
                tableNames.add(tableName);
                // }
            }
        } catch (SQLException e) {
            throw new RuntimeException("Exception occurred while finding database table names", e);
        }
    }

    private void truncate() {

        setForeignKeyCheck(OFF);
        for (String tableName : tableNames) {
            log.info("truncate table: {}", tableName);

            entityManager.createNativeQuery(String.format("TRUNCATE TABLE %s", tableName))
                .executeUpdate();
        }
        setForeignKeyCheck(ON);
    }

    private void setForeignKeyCheck(int mode) {

        entityManager.createNativeQuery(
            "SELECT 'ALTER TABLE ' || table_name || ' DISABLE CONSTRAINT ' || constraint_name " +
            "FROM user_constraints WHERE constraint_type = 'R'", String.class);
    }

    private void createSampleTable(Statement stmt) throws SQLException {
        stmt.execute("""
            CREATE TABLE users (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                username VARCHAR2(100),
                email VARCHAR2(255),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """);

        stmt.execute("""
            CREATE TABLE posts (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id NUMBER REFERENCES users(id),
                content VARCHAR2(1000),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """);
    }
}
