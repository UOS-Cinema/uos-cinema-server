package com.uos.dsd.cinema.utils;

import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;

import javax.sql.DataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

public class H2DBInitializeStrategy implements DBInitializeStrategy {

    private final DataSource dataSource;
    private EntityManager entityManager;

    public H2DBInitializeStrategy(DataSource dataSource) {

        this.dataSource = dataSource;
    }

    @Override
    public void truncateTables(List<String> tableNames) {

        try (Connection connection = dataSource.getConnection();
            Statement stmt = connection.createStatement()) {

            stmt.execute("SET REFERENTIAL_INTEGRITY FALSE");
            for (String tableName : tableNames) {
                stmt.executeUpdate("TRUNCATE TABLE " + tableName);
            }
            stmt.execute("SET REFERENTIAL_INTEGRITY TRUE");

        } catch (SQLException e) {
            throw new RuntimeException("Exception occurred while truncating tables in H2", e);
        }
    }

    @Override
    public void setForeignKeyCheck(boolean check) {
        try (Connection connection = dataSource.getConnection();
            Statement stmt = connection.createStatement()) {

            if (check) {
                stmt.execute("SET REFERENTIAL_INTEGRITY TRUE");
            } else {
                stmt.execute("SET REFERENTIAL_INTEGRITY FALSE");
            }

        } catch (SQLException e) {
            throw new RuntimeException("Failed to set foreign key check in H2", e);
        }
    }

    @Override
    public void createTable() {
        try (Connection connection = dataSource.getConnection();
            Statement stmt = connection.createStatement()) {

            stmt.executeUpdate("""
                CREATE TABLE admins (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name VARCHAR(20) UNIQUE,
                    password CHAR(64),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    deleted_at TIMESTAMP DEFAULT NULL
                )
            """);

            stmt.executeUpdate("""
                CREATE TABLE users (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    username VARCHAR(100),
                    email VARCHAR(255),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);

            stmt.executeUpdate("""
                CREATE TABLE posts (
                    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    user_id INT,
                    content VARCHAR(1000),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users(id)
                )
            """);

        } catch (SQLException e) {
            throw new RuntimeException("Failed to create sample tables in H2", e);
        }
    }

    @Override
    @Transactional
    public void createData() {
        if (entityManager == null) {
            throw new RuntimeException("EntityManager is not set");
        }

        entityManager.createNativeQuery("""
            INSERT INTO users (username, email) VALUES ('test', 'test@test.com')
        """).executeUpdate();

        Number userId = (Number) entityManager.createNativeQuery("""
            SELECT id FROM users WHERE username = 'test' AND email = 'test@test.com'
        """).getSingleResult();

        entityManager.createNativeQuery("""
            INSERT INTO posts (user_id, content) VALUES (:userId, 'Hello from H2!')
        """)
        .setParameter("userId", userId)
        .executeUpdate();
    }

    @Override
    public void setEntityManager(EntityManager entityManager) {

        if (this.entityManager != null) {
            throw new RuntimeException("EntityManager is already set");
        }
        this.entityManager = entityManager;
    }
}
