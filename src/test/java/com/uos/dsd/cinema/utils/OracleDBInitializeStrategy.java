package com.uos.dsd.cinema.utils;

import jakarta.persistence.EntityManager;
import jakarta.transaction.Transactional;

import javax.sql.DataSource;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.util.List;

public class OracleDBInitializeStrategy implements DBInitializeStrategy {

    private DataSource dataSource;
    private EntityManager entityManager;

    public OracleDBInitializeStrategy(DataSource dataSource) {

        this.dataSource = dataSource;
        this.entityManager = null;
    }

    @Override
    public void truncateTables(List<String> tableNames) {

        try (Connection connection = dataSource.getConnection()) {
            for (String tableName : tableNames) {
                connection.createStatement().executeUpdate("TRUNCATE TABLE " + tableName);
            }
        } catch (SQLException e) {
            throw new RuntimeException("Exception occurred while truncating tables", e);
        }
    }

    @Override
    public void setForeignKeyCheck(boolean check) {

        try (Connection connection = dataSource.getConnection();
                Statement statement = connection.createStatement()) {
            ResultSet rs;

            if (check) {
                rs = statement.executeQuery("""
                    SELECT 'ALTER TABLE ' || table_name || ' ENABLE CONSTRAINT ' || constraint_name
                    FROM user_constraints
                    WHERE constraint_type = 'R'
                """);
            } else {
                rs = statement.executeQuery("""
                    SELECT 'ALTER TABLE ' || table_name || ' DISABLE CONSTRAINT ' || constraint_name
                    FROM user_constraints
                    WHERE constraint_type = 'R'
                """);
            }

            try (Statement execStmt = connection.createStatement()) {
                while (rs.next()) {
                    String query = rs.getString(1);
                    execStmt.executeUpdate(query);
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException("Failed to set foreign key check", e);
        }
    }

    @Override
    public void createTable() {

        try (Connection connection = dataSource.getConnection()) {
            Statement statement = connection.createStatement();

            statement.executeUpdate("""
                    CREATE TABLE users (
                        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        username VARCHAR2(100),
                        email VARCHAR2(255),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """);

            statement.executeUpdate("""
                    CREATE TABLE posts (
                        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        user_id NUMBER REFERENCES users(id),
                        content VARCHAR2(1000),
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """);
        } catch (SQLException e) {
            throw new RuntimeException("Failed to create sample table", e);
        }
    }

    @Override
    @Transactional
    public void createData() {

        if (entityManager == null) {
            throw new RuntimeException("EntityManager is not set");
        }

        entityManager.createNativeQuery("""
                    INSERT INTO users (username, email) VALUES ('test', 'test@test.com')
                """);
        entityManager.createNativeQuery("""
                    INSERT INTO posts (user_id, content) VALUES (1, 'test')
                """);
    }

    @Override
    public void setEntityManager(EntityManager entityManager) {

        if (this.entityManager != null) {
            throw new RuntimeException("EntityManager is already set");
        }
        this.entityManager = entityManager;
    }
}
